// Generated by gencpp from file fanuc_moveit/TransformationsArray.msg
// DO NOT EDIT!


#ifndef FANUC_MOVEIT_MESSAGE_TRANSFORMATIONSARRAY_H
#define FANUC_MOVEIT_MESSAGE_TRANSFORMATIONSARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fanuc_moveit/Transformations.h>

namespace fanuc_moveit
{
template <class ContainerAllocator>
struct TransformationsArray_
{
  typedef TransformationsArray_<ContainerAllocator> Type;

  TransformationsArray_()
    : transformations()  {
    }
  TransformationsArray_(const ContainerAllocator& _alloc)
    : transformations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::fanuc_moveit::Transformations_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fanuc_moveit::Transformations_<ContainerAllocator> >::other >  _transformations_type;
  _transformations_type transformations;





  typedef boost::shared_ptr< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> const> ConstPtr;

}; // struct TransformationsArray_

typedef ::fanuc_moveit::TransformationsArray_<std::allocator<void> > TransformationsArray;

typedef boost::shared_ptr< ::fanuc_moveit::TransformationsArray > TransformationsArrayPtr;
typedef boost::shared_ptr< ::fanuc_moveit::TransformationsArray const> TransformationsArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fanuc_moveit::TransformationsArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fanuc_moveit::TransformationsArray_<ContainerAllocator1> & lhs, const ::fanuc_moveit::TransformationsArray_<ContainerAllocator2> & rhs)
{
  return lhs.transformations == rhs.transformations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fanuc_moveit::TransformationsArray_<ContainerAllocator1> & lhs, const ::fanuc_moveit::TransformationsArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fanuc_moveit

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "600ffd76db98e0bc75fa65c75bc66361";
  }

  static const char* value(const ::fanuc_moveit::TransformationsArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x600ffd76db98e0bcULL;
  static const uint64_t static_value2 = 0x75fa65c75bc66361ULL;
};

template<class ContainerAllocator>
struct DataType< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fanuc_moveit/TransformationsArray";
  }

  static const char* value(const ::fanuc_moveit::TransformationsArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This represent an array of transformations\n"
"\n"
"Transformations[] transformations\n"
"================================================================================\n"
"MSG: fanuc_moveit/Transformations\n"
"#This represent three different representation of a trasform, \n"
"#RPY, axis-angle and homogeneus trasformation matrix\n"
"string parent_frame\n"
"string child_frame\n"
"geometry_msgs/Vector3 translation\n"
"geometry_msgs/Vector3 rpy\n"
"AxisAngle axis_angle\n"
"TransformationMatrix tf_matrix\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: fanuc_moveit/AxisAngle\n"
"#This represent a transformation as axis-angle representation\n"
"\n"
"geometry_msgs/Vector3 axis\n"
"float32 angle\n"
"\n"
"================================================================================\n"
"MSG: fanuc_moveit/TransformationMatrix\n"
"# This represent the 4x4 trasformation matrix, see MultiArrayLayout\n"
"#message definition for documentation on all multiarrays.\n"
"\n"
"geometry_msgs/Vector3 translation\n"
"float32[] rotation\n"
;
  }

  static const char* value(const ::fanuc_moveit::TransformationsArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transformations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformationsArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fanuc_moveit::TransformationsArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fanuc_moveit::TransformationsArray_<ContainerAllocator>& v)
  {
    s << indent << "transformations[]" << std::endl;
    for (size_t i = 0; i < v.transformations.size(); ++i)
    {
      s << indent << "  transformations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fanuc_moveit::Transformations_<ContainerAllocator> >::stream(s, indent + "    ", v.transformations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FANUC_MOVEIT_MESSAGE_TRANSFORMATIONSARRAY_H
