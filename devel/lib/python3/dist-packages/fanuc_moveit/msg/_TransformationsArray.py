# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fanuc_moveit/TransformationsArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import fanuc_moveit.msg
import geometry_msgs.msg

class TransformationsArray(genpy.Message):
  _md5sum = "600ffd76db98e0bc75fa65c75bc66361"
  _type = "fanuc_moveit/TransformationsArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#This represent an array of transformations

Transformations[] transformations
================================================================================
MSG: fanuc_moveit/Transformations
#This represent three different representation of a trasform, 
#RPY, axis-angle and homogeneus trasformation matrix
string parent_frame
string child_frame
geometry_msgs/Vector3 translation
geometry_msgs/Vector3 rpy
AxisAngle axis_angle
TransformationMatrix tf_matrix
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: fanuc_moveit/AxisAngle
#This represent a transformation as axis-angle representation

geometry_msgs/Vector3 axis
float32 angle

================================================================================
MSG: fanuc_moveit/TransformationMatrix
# This represent the 4x4 trasformation matrix, see MultiArrayLayout
#message definition for documentation on all multiarrays.

geometry_msgs/Vector3 translation
float32[] rotation"""
  __slots__ = ['transformations']
  _slot_types = ['fanuc_moveit/Transformations[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       transformations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransformationsArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.transformations is None:
        self.transformations = []
    else:
      self.transformations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.transformations)
      buff.write(_struct_I.pack(length))
      for val1 in self.transformations:
        _x = val1.parent_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.rpy
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.axis_angle
        _v4 = _v3.axis
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v3.angle
        buff.write(_get_struct_f().pack(_x))
        _v5 = val1.tf_matrix
        _v6 = _v5.translation
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v5.rotation)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*_v5.rotation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transformations is None:
        self.transformations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transformations = []
      for i in range(0, length):
        val1 = fanuc_moveit.msg.Transformations()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.parent_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.parent_frame = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame = str[start:end]
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.rpy
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v9 = val1.axis_angle
        _v10 = _v9.axis
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v9.angle,) = _get_struct_f().unpack(str[start:end])
        _v11 = val1.tf_matrix
        _v12 = _v11.translation
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v11.rotation = s.unpack(str[start:end])
        self.transformations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.transformations)
      buff.write(_struct_I.pack(length))
      for val1 in self.transformations:
        _x = val1.parent_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v13 = val1.translation
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.rpy
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = val1.axis_angle
        _v16 = _v15.axis
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v15.angle
        buff.write(_get_struct_f().pack(_x))
        _v17 = val1.tf_matrix
        _v18 = _v17.translation
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v17.rotation)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(_v17.rotation.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.transformations is None:
        self.transformations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.transformations = []
      for i in range(0, length):
        val1 = fanuc_moveit.msg.Transformations()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.parent_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.parent_frame = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame = str[start:end]
        _v19 = val1.translation
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = val1.rpy
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = val1.axis_angle
        _v22 = _v21.axis
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v21.angle,) = _get_struct_f().unpack(str[start:end])
        _v23 = val1.tf_matrix
        _v24 = _v23.translation
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v23.rotation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.transformations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
