# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from fanuc_kinematics/IKAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import fanuc_kinematics.msg
import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class IKAction(genpy.Message):
  _md5sum = "6de73d28203df34cb157d51b38958805"
  _type = "fanuc_kinematics/IKAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

IKActionGoal action_goal
IKActionResult action_result
IKActionFeedback action_feedback

================================================================================
MSG: fanuc_kinematics/IKActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
IKGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: fanuc_kinematics/IKGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition. The pose for which we wantto find the inverse kinematics solutions
geometry_msgs/Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: fanuc_kinematics/IKActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
IKResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: fanuc_kinematics/IKResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Result.The resultant vector of double messages that contains the joint values for the ik problem
moveit_msgs/RobotState[] solutions

================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# DISCLAIMER: This field is not in use yet and all other poses
# are still interpreted in the header frame.
# https://github.com/ros-planning/moveit/pull/2037
# implements the actual logic for this field.
# ---
# The object's pose relative to the header frame.
# The shapes and subframe poses are defined relative to this pose.
geometry_msgs/Pose pose

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the object's pose

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Named subframes on the object. Use these to define points of interest on the object that you want
# to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
# If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
# "screwdriver/tip" for planning.
# The length of the subframe_names and subframe_poses has to be identical.
string[] subframe_names
geometry_msgs/Pose[] subframe_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: fanuc_kinematics/IKActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
IKFeedback feedback

================================================================================
MSG: fanuc_kinematics/IKFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback. The single joint angles found at each step of the algorithm
moveit_msgs/RobotState solution
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['fanuc_kinematics/IKActionGoal','fanuc_kinematics/IKActionResult','fanuc_kinematics/IKActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IKAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = fanuc_kinematics.msg.IKActionGoal()
      if self.action_result is None:
        self.action_result = fanuc_kinematics.msg.IKActionResult()
      if self.action_feedback is None:
        self.action_feedback = fanuc_kinematics.msg.IKActionFeedback()
    else:
      self.action_goal = fanuc_kinematics.msg.IKActionGoal()
      self.action_result = fanuc_kinematics.msg.IKActionResult()
      self.action_feedback = fanuc_kinematics.msg.IKActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pose.position.x, _x.action_goal.goal.pose.position.y, _x.action_goal.goal.pose.position.z, _x.action_goal.goal.pose.orientation.x, _x.action_goal.goal.pose.orientation.y, _x.action_goal.goal.pose.orientation.z, _x.action_goal.goal.pose.orientation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.solutions:
        _v1 = val1.joint_state
        _v2 = _v1.header
        _x = _v2.seq
        buff.write(_get_struct_I().pack(_x))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.name)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.name:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v1.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.position))
        length = len(_v1.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.velocity))
        length = len(_v1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v1.effort))
        _v4 = val1.multi_dof_joint_state
        _v5 = _v4.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v4.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v4.transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.transforms:
          _v7 = val3.translation
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = val3.rotation
          _x = _v8
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v4.twist)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.twist:
          _v9 = val3.linear
          _x = _v9
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v10 = val3.angular
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v4.wrench)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.wrench:
          _v11 = val3.force
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val3.torque
          _x = _v12
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.attached_collision_objects:
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v13 = val2.object
          _v14 = _v13.header
          _x = _v14.seq
          buff.write(_get_struct_I().pack(_x))
          _v15 = _v14.stamp
          _x = _v15
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v14.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v16 = _v13.pose
          _v17 = _v16.position
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v18 = _v16.orientation
          _x = _v18
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v13.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v19 = _v13.type
          _x = _v19.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v19.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v13.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.dimensions))
          length = len(_v13.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.primitive_poses:
            _v20 = val4.position
            _x = _v20
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v21 = val4.orientation
            _x = _v21
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v13.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(_get_struct_3I().pack(*val5.vertex_indices))
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v13.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.mesh_poses:
            _v22 = val4.position
            _x = _v22
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v23 = val4.orientation
            _x = _v23
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v13.planes)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.planes:
            buff.write(_get_struct_4d().pack(*val4.coef))
          length = len(_v13.plane_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.plane_poses:
            _v24 = val4.position
            _x = _v24
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v25 = val4.orientation
            _x = _v25
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v13.subframe_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.subframe_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
          length = len(_v13.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v13.subframe_poses:
            _v26 = val4.position
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = val4.orientation
            _x = _v27
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v13.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val2.touch_links)
          buff.write(_struct_I.pack(length))
          for val3 in val2.touch_links:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          _v28 = val2.detach_posture
          _v29 = _v28.header
          _x = _v29.seq
          buff.write(_get_struct_I().pack(_x))
          _v30 = _v29.stamp
          _x = _v30
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v29.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v28.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v28.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
          length = len(_v28.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v28.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val4.effort))
            _v31 = val4.time_from_start
            _x = _v31
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        _x = val1.is_diff
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.solution.joint_state.header.seq, _x.action_feedback.feedback.solution.joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.joint_state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_feedback.feedback.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_feedback.feedback.solution.joint_state.position))
      length = len(self.action_feedback.feedback.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_feedback.feedback.solution.joint_state.velocity))
      length = len(self.action_feedback.feedback.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_feedback.feedback.solution.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.solution.multi_dof_joint_state.header.seq, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.transforms:
        _v32 = val1.translation
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v33 = val1.rotation
        _x = _v33
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.twist:
        _v34 = val1.linear
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = val1.angular
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.wrench:
        _v36 = val1.force
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v37 = val1.torque
        _x = _v37
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.solution.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v38 = val1.object
        _v39 = _v38.header
        _x = _v39.seq
        buff.write(_get_struct_I().pack(_x))
        _v40 = _v39.stamp
        _x = _v40
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v39.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v41 = _v38.pose
        _v42 = _v41.position
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v43 = _v41.orientation
        _x = _v43
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v38.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v44 = _v38.type
        _x = _v44.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v44.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v38.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v38.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.primitive_poses:
          _v45 = val3.position
          _x = _v45
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v46 = val3.orientation
          _x = _v46
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v38.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v38.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.mesh_poses:
          _v47 = val3.position
          _x = _v47
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v48 = val3.orientation
          _x = _v48
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v38.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v38.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.plane_poses:
          _v49 = val3.position
          _x = _v49
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v50 = val3.orientation
          _x = _v50
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v38.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v38.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.subframe_poses:
          _v51 = val3.position
          _x = _v51
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v52 = val3.orientation
          _x = _v52
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v38.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v53 = val1.detach_posture
        _v54 = _v53.header
        _x = _v54.seq
        buff.write(_get_struct_I().pack(_x))
        _v55 = _v54.stamp
        _x = _v55
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v54.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v53.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v53.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v53.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v53.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v56 = val3.time_from_start
          _x = _v56
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_feedback.feedback.solution.is_diff
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = fanuc_kinematics.msg.IKActionGoal()
      if self.action_result is None:
        self.action_result = fanuc_kinematics.msg.IKActionResult()
      if self.action_feedback is None:
        self.action_feedback = fanuc_kinematics.msg.IKActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pose.position.x, _x.action_goal.goal.pose.position.y, _x.action_goal.goal.pose.position.z, _x.action_goal.goal.pose.orientation.x, _x.action_goal.goal.pose.orientation.y, _x.action_goal.goal.pose.orientation.z, _x.action_goal.goal.pose.orientation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.solutions = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotState()
        _v57 = val1.joint_state
        _v58 = _v57.header
        start = end
        end += 4
        (_v58.seq,) = _get_struct_I().unpack(str[start:end])
        _v59 = _v58.stamp
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v58.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v58.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v57.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v57.name.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v57.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v57.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v57.effort = s.unpack(str[start:end])
        _v60 = val1.multi_dof_joint_state
        _v61 = _v60.header
        start = end
        end += 4
        (_v61.seq,) = _get_struct_I().unpack(str[start:end])
        _v62 = _v61.stamp
        _x = _v62
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v61.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v61.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v60.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Transform()
          _v63 = val3.translation
          _x = _v63
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v64 = val3.rotation
          _x = _v64
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v60.transforms.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.twist = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Twist()
          _v65 = val3.linear
          _x = _v65
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v66 = val3.angular
          _x = _v66
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60.twist.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v60.wrench = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Wrench()
          _v67 = val3.force
          _x = _v67
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v68 = val3.torque
          _x = _v68
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60.wrench.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.attached_collision_objects = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v69 = val2.object
          _v70 = _v69.header
          start = end
          end += 4
          (_v70.seq,) = _get_struct_I().unpack(str[start:end])
          _v71 = _v70.stamp
          _x = _v71
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v70.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v70.frame_id = str[start:end]
          _v72 = _v69.pose
          _v73 = _v72.position
          _x = _v73
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v74 = _v72.orientation
          _x = _v74
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v69.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v69.id = str[start:end]
          _v75 = _v69.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v75.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v75.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v75.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v75.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = s.unpack(str[start:end])
            _v69.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v76 = val4.position
            _x = _v76
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v77 = val4.orientation
            _x = _v77
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v69.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v69.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v78 = val4.position
            _x = _v78
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v79 = val4.orientation
            _x = _v79
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v69.mesh_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.planes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val4.coef = _get_struct_4d().unpack(str[start:end])
            _v69.planes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.plane_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v80 = val4.position
            _x = _v80
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v81 = val4.orientation
            _x = _v81
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v69.plane_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4 = str[start:end]
            _v69.subframe_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v69.subframe_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v82 = val4.position
            _x = _v82
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v83 = val4.orientation
            _x = _v83
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v69.subframe_poses.append(val4)
          start = end
          end += 1
          (_v69.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.touch_links.append(val3)
          _v84 = val2.detach_posture
          _v85 = _v84.header
          start = end
          end += 4
          (_v85.seq,) = _get_struct_I().unpack(str[start:end])
          _v86 = _v85.stamp
          _x = _v86
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v85.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v85.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v84.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4 = str[start:end]
            _v84.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v84.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.effort = s.unpack(str[start:end])
            _v87 = val4.time_from_start
            _x = _v87
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v84.points.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.attached_collision_objects.append(val2)
        start = end
        end += 1
        (val1.is_diff,) = _get_struct_B().unpack(str[start:end])
        val1.is_diff = bool(val1.is_diff)
        self.action_result.result.solutions.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.solution.joint_state.header.seq, _x.action_feedback.feedback.solution.joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.solution.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_feedback.feedback.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.solution.multi_dof_joint_state.header.seq, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v88 = val1.translation
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v89 = val1.rotation
        _x = _v89
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v90 = val1.linear
        _x = _v90
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v91 = val1.angular
        _x = _v91
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v92 = val1.force
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v93 = val1.torque
        _x = _v93
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v94 = val1.object
        _v95 = _v94.header
        start = end
        end += 4
        (_v95.seq,) = _get_struct_I().unpack(str[start:end])
        _v96 = _v95.stamp
        _x = _v96
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v95.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v95.frame_id = str[start:end]
        _v97 = _v94.pose
        _v98 = _v97.position
        _x = _v98
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v99 = _v97.orientation
        _x = _v99
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v94.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v94.id = str[start:end]
        _v100 = _v94.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v100.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v100.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v100.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v94.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v101 = val3.position
          _x = _v101
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v102 = val3.orientation
          _x = _v102
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v94.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v94.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v103 = val3.position
          _x = _v103
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v104 = val3.orientation
          _x = _v104
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v94.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v94.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v105 = val3.position
          _x = _v105
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v106 = val3.orientation
          _x = _v106
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v94.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v94.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v94.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v107 = val3.position
          _x = _v107
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v108 = val3.orientation
          _x = _v108
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v94.subframe_poses.append(val3)
        start = end
        end += 1
        (_v94.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v109 = val1.detach_posture
        _v110 = _v109.header
        start = end
        end += 4
        (_v110.seq,) = _get_struct_I().unpack(str[start:end])
        _v111 = _v110.stamp
        _x = _v111
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v110.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v110.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v109.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v109.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v109.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v112 = val3.time_from_start
          _x = _v112
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v109.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_feedback.feedback.solution.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_feedback.feedback.solution.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_feedback.feedback.solution.is_diff = bool(self.action_feedback.feedback.solution.is_diff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.pose.position.x, _x.action_goal.goal.pose.position.y, _x.action_goal.goal.pose.position.z, _x.action_goal.goal.pose.orientation.x, _x.action_goal.goal.pose.orientation.y, _x.action_goal.goal.pose.orientation.z, _x.action_goal.goal.pose.orientation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.solutions)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.solutions:
        _v113 = val1.joint_state
        _v114 = _v113.header
        _x = _v114.seq
        buff.write(_get_struct_I().pack(_x))
        _v115 = _v114.stamp
        _x = _v115
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v114.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v113.name)
        buff.write(_struct_I.pack(length))
        for val3 in _v113.name:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v113.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v113.position.tostring())
        length = len(_v113.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v113.velocity.tostring())
        length = len(_v113.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v113.effort.tostring())
        _v116 = val1.multi_dof_joint_state
        _v117 = _v116.header
        _x = _v117.seq
        buff.write(_get_struct_I().pack(_x))
        _v118 = _v117.stamp
        _x = _v118
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v117.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v116.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v116.transforms)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.transforms:
          _v119 = val3.translation
          _x = _v119
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v120 = val3.rotation
          _x = _v120
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v116.twist)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.twist:
          _v121 = val3.linear
          _x = _v121
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v122 = val3.angular
          _x = _v122
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v116.wrench)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.wrench:
          _v123 = val3.force
          _x = _v123
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v124 = val3.torque
          _x = _v124
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.attached_collision_objects:
          _x = val2.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v125 = val2.object
          _v126 = _v125.header
          _x = _v126.seq
          buff.write(_get_struct_I().pack(_x))
          _v127 = _v126.stamp
          _x = _v127
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v126.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v128 = _v125.pose
          _v129 = _v128.position
          _x = _v129
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v130 = _v128.orientation
          _x = _v130
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v125.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v131 = _v125.type
          _x = _v131.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v131.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v125.primitives)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.primitives:
            _x = val4.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val4.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.dimensions.tostring())
          length = len(_v125.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.primitive_poses:
            _v132 = val4.position
            _x = _v132
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v133 = val4.orientation
            _x = _v133
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v125.meshes)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.meshes:
            length = len(val4.triangles)
            buff.write(_struct_I.pack(length))
            for val5 in val4.triangles:
              buff.write(val5.vertex_indices.tostring())
            length = len(val4.vertices)
            buff.write(_struct_I.pack(length))
            for val5 in val4.vertices:
              _x = val5
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v125.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.mesh_poses:
            _v134 = val4.position
            _x = _v134
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v135 = val4.orientation
            _x = _v135
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v125.planes)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.planes:
            buff.write(val4.coef.tostring())
          length = len(_v125.plane_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.plane_poses:
            _v136 = val4.position
            _x = _v136
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v137 = val4.orientation
            _x = _v137
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v125.subframe_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.subframe_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
          length = len(_v125.subframe_poses)
          buff.write(_struct_I.pack(length))
          for val4 in _v125.subframe_poses:
            _v138 = val4.position
            _x = _v138
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v139 = val4.orientation
            _x = _v139
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v125.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val2.touch_links)
          buff.write(_struct_I.pack(length))
          for val3 in val2.touch_links:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
          _v140 = val2.detach_posture
          _v141 = _v140.header
          _x = _v141.seq
          buff.write(_get_struct_I().pack(_x))
          _v142 = _v141.stamp
          _x = _v142
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v141.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v140.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v140.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val4))
          length = len(_v140.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v140.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v143 = val4.time_from_start
            _x = _v143
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val2.weight
          buff.write(_get_struct_d().pack(_x))
        _x = val1.is_diff
        buff.write(_get_struct_B().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.solution.joint_state.header.seq, _x.action_feedback.feedback.solution.joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.joint_state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_feedback.feedback.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_feedback.feedback.solution.joint_state.position.tostring())
      length = len(self.action_feedback.feedback.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_feedback.feedback.solution.joint_state.velocity.tostring())
      length = len(self.action_feedback.feedback.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_feedback.feedback.solution.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.feedback.solution.multi_dof_joint_state.header.seq, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.transforms:
        _v144 = val1.translation
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v145 = val1.rotation
        _x = _v145
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.twist:
        _v146 = val1.linear
        _x = _v146
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v147 = val1.angular
        _x = _v147
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.solution.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.multi_dof_joint_state.wrench:
        _v148 = val1.force
        _x = _v148
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v149 = val1.torque
        _x = _v149
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.solution.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.solution.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v150 = val1.object
        _v151 = _v150.header
        _x = _v151.seq
        buff.write(_get_struct_I().pack(_x))
        _v152 = _v151.stamp
        _x = _v152
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v151.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v153 = _v150.pose
        _v154 = _v153.position
        _x = _v154
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v155 = _v153.orientation
        _x = _v155
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v150.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v156 = _v150.type
        _x = _v156.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v156.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v150.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v150.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.primitive_poses:
          _v157 = val3.position
          _x = _v157
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v158 = val3.orientation
          _x = _v158
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v150.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v150.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.mesh_poses:
          _v159 = val3.position
          _x = _v159
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v160 = val3.orientation
          _x = _v160
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v150.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.planes:
          buff.write(val3.coef.tostring())
        length = len(_v150.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.plane_poses:
          _v161 = val3.position
          _x = _v161
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v162 = val3.orientation
          _x = _v162
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v150.subframe_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.subframe_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v150.subframe_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v150.subframe_poses:
          _v163 = val3.position
          _x = _v163
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v164 = val3.orientation
          _x = _v164
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v150.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v165 = val1.detach_posture
        _v166 = _v165.header
        _x = _v166.seq
        buff.write(_get_struct_I().pack(_x))
        _v167 = _v166.stamp
        _x = _v167
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v166.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v165.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v165.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v165.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v165.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v168 = val3.time_from_start
          _x = _v168
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_feedback.feedback.solution.is_diff
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = fanuc_kinematics.msg.IKActionGoal()
      if self.action_result is None:
        self.action_result = fanuc_kinematics.msg.IKActionResult()
      if self.action_feedback is None:
        self.action_feedback = fanuc_kinematics.msg.IKActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.pose.position.x, _x.action_goal.goal.pose.position.y, _x.action_goal.goal.pose.position.z, _x.action_goal.goal.pose.orientation.x, _x.action_goal.goal.pose.orientation.y, _x.action_goal.goal.pose.orientation.z, _x.action_goal.goal.pose.orientation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.solutions = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotState()
        _v169 = val1.joint_state
        _v170 = _v169.header
        start = end
        end += 4
        (_v170.seq,) = _get_struct_I().unpack(str[start:end])
        _v171 = _v170.stamp
        _x = _v171
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v170.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v170.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v169.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v169.name.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v169.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v169.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v169.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v172 = val1.multi_dof_joint_state
        _v173 = _v172.header
        start = end
        end += 4
        (_v173.seq,) = _get_struct_I().unpack(str[start:end])
        _v174 = _v173.stamp
        _x = _v174
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v173.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v173.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v172.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v172.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v172.transforms = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Transform()
          _v175 = val3.translation
          _x = _v175
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v176 = val3.rotation
          _x = _v176
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v172.transforms.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v172.twist = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Twist()
          _v177 = val3.linear
          _x = _v177
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v178 = val3.angular
          _x = _v178
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v172.twist.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v172.wrench = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Wrench()
          _v179 = val3.force
          _x = _v179
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v180 = val3.torque
          _x = _v180
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v172.wrench.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.attached_collision_objects = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.link_name = str[start:end]
          _v181 = val2.object
          _v182 = _v181.header
          start = end
          end += 4
          (_v182.seq,) = _get_struct_I().unpack(str[start:end])
          _v183 = _v182.stamp
          _x = _v183
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v182.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v182.frame_id = str[start:end]
          _v184 = _v181.pose
          _v185 = _v184.position
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v186 = _v184.orientation
          _x = _v186
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v181.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v181.id = str[start:end]
          _v187 = _v181.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v187.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v187.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v187.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v187.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.primitives = []
          for i in range(0, length):
            val4 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val4.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v181.primitives.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.primitive_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v188 = val4.position
            _x = _v188
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v189 = val4.orientation
            _x = _v189
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v181.primitive_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.meshes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.triangles = []
            for i in range(0, length):
              val5 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val5.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val4.triangles.append(val5)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val4.vertices = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point()
              _x = val5
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val4.vertices.append(val5)
            _v181.meshes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.mesh_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v190 = val4.position
            _x = _v190
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v191 = val4.orientation
            _x = _v191
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v181.mesh_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.planes = []
          for i in range(0, length):
            val4 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val4.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v181.planes.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.plane_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v192 = val4.position
            _x = _v192
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v193 = val4.orientation
            _x = _v193
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v181.plane_poses.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.subframe_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4 = str[start:end]
            _v181.subframe_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v181.subframe_poses = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Pose()
            _v194 = val4.position
            _x = _v194
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v195 = val4.orientation
            _x = _v195
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v181.subframe_poses.append(val4)
          start = end
          end += 1
          (_v181.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3 = str[start:end]
            val2.touch_links.append(val3)
          _v196 = val2.detach_posture
          _v197 = _v196.header
          start = end
          end += 4
          (_v197.seq,) = _get_struct_I().unpack(str[start:end])
          _v198 = _v197.stamp
          _x = _v198
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v197.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v197.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v196.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4 = str[start:end]
            _v196.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v196.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v199 = val4.time_from_start
            _x = _v199
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v196.points.append(val4)
          start = end
          end += 8
          (val2.weight,) = _get_struct_d().unpack(str[start:end])
          val1.attached_collision_objects.append(val2)
        start = end
        end += 1
        (val1.is_diff,) = _get_struct_B().unpack(str[start:end])
        val1.is_diff = bool(val1.is_diff)
        self.action_result.result.solutions.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.solution.joint_state.header.seq, _x.action_feedback.feedback.solution.joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.solution.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_feedback.feedback.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_feedback.feedback.solution.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.solution.multi_dof_joint_state.header.seq, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.secs, _x.action_feedback.feedback.solution.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.solution.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_feedback.feedback.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v200 = val1.translation
        _x = _v200
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v201 = val1.rotation
        _x = _v201
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v202 = val1.linear
        _x = _v202
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v203 = val1.angular
        _x = _v203
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v204 = val1.force
        _x = _v204
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v205 = val1.torque
        _x = _v205
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_feedback.feedback.solution.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.solution.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v206 = val1.object
        _v207 = _v206.header
        start = end
        end += 4
        (_v207.seq,) = _get_struct_I().unpack(str[start:end])
        _v208 = _v207.stamp
        _x = _v208
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v207.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v207.frame_id = str[start:end]
        _v209 = _v206.pose
        _v210 = _v209.position
        _x = _v210
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v211 = _v209.orientation
        _x = _v211
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v206.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v206.id = str[start:end]
        _v212 = _v206.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v212.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v212.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v206.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v213 = val3.position
          _x = _v213
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v214 = val3.orientation
          _x = _v214
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v206.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v206.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v215 = val3.position
          _x = _v215
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v216 = val3.orientation
          _x = _v216
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v206.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v206.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v217 = val3.position
          _x = _v217
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v218 = val3.orientation
          _x = _v218
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v206.plane_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.subframe_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v206.subframe_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v206.subframe_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v219 = val3.position
          _x = _v219
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v220 = val3.orientation
          _x = _v220
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v206.subframe_poses.append(val3)
        start = end
        end += 1
        (_v206.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v221 = val1.detach_posture
        _v222 = _v221.header
        start = end
        end += 4
        (_v222.seq,) = _get_struct_I().unpack(str[start:end])
        _v223 = _v222.stamp
        _x = _v223
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v222.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v222.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v221.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v221.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v221.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v224 = val3.time_from_start
          _x = _v224
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v221.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_feedback.feedback.solution.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_feedback.feedback.solution.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_feedback.feedback.solution.is_diff = bool(self.action_feedback.feedback.solution.is_diff)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
